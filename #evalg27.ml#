(* Operations on Eval *)

type ide = Ide of string;;

type exp = Val of ide
			| Eint of int
			| Echar of char
			| True
			| False
			| Empty
			| Sum of exp * exp
			| Diff of exp * exp
			| Times of exp * exp
			| And of exp * exp
			| Or of exp * exp
			| Not of exp
			| Eq of exp * exp
			| Less of exp * exp
			| Cons of exp * exp
			| Head of exp
			| Tail of exp
			| Fst of exp
			| Snd of exp
			| Epair of exp * exp
			| Ifthenelse of exp * exp * exp
			| Let of ide * exp * exp
			| Fun of ide * exp
			| Appl of exp * exp
			| Rec of ide * exp ;;

type eval =
			Undefined
			| Int of int
			| Bool of bool
			| Char of char
			| List of eval list
			| Pair of eval * eval
			| Closure of exp * env
			and
			env = ide -> eval;;

let typecheck (x, y) =
      match x with
      | "int" ->
    (match y with 
    |  Int(u) -> true
    | _ -> false)
      | "bool" ->
    (match y with 
    |  Bool(u) -> true
    | _ -> false)
      | "char" -> 
          (match y with
          | Char(u) -> true
          | _ -> false)
      | _ -> failwith ("not a valid type");;

 
let eq (x,y) =
      if typecheck("int",x) & typecheck("int",y) 
			then 
			(match (x,y) with
			| (Int(u), Int(w)) -> Bool(u = w))
      else if typecheck("char",x) & typecheck("char",y) 
			then 
			(match (x,y) with
			| (Int(u), Int(w)) -> Bool(u = w))
      else failwith ("type error");;
 
let Sum (x,y) =
      if typecheck("int",x) & typecheck("int",y) 
      then 
			(match (x,y) with
			| (Int(u), Int(w)) -> Int(u+w))
      else failwith ("type error");;
 
let Diff (x,y) =
      if typecheck("int",x) & typecheck("int",y) 
      then 
   	(match (x,y) with
   	| (Int(u), Int(w)) -> Int(u-w))
      else failwith ("type error");;
 
let Times (x,y) =
      if typecheck("int",x) & typecheck("int",y) 
      then 
   	(match (x,y) with
   	| (Int(u), Int(w)) -> Int(u*w))
      else failwith ("type error");;
 
let And (x,y) =
      if typecheck("bool",x) & typecheck("bool",y) 
      then 
   	(match (x,y) with
   	| (Bool(u), Bool(w)) -> Bool(u & w))
      else failwith ("type error");;
 
let Or (x,y) =
      if typecheck("bool",x) & typecheck("bool",y) 
      then 
   	(match (x,y) with
   	| (Bool(u), Bool(w)) -> Bool(u or w))
      else failwith ("type error");;
 
let Not x =
      if typecheck("bool",x) 
      then 
     	(match x with
     	| Bool(y) -> Bool(not y) )
      else failwith ("type error");;
	  
let Less (x,y) =
	if typecheck("int",x) & typecheck("int",y) 
      then 
   	(match (x,y) with
   	| (int(u),int(w)) -> Bool(u<w))
      else failwith ("type error");;
	  